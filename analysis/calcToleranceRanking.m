function results = calcToleranceRanking(results,parWeights,weightedTol)
% calcToleranceRanking - Calculates the performance and robustness scores
% and performs a variability analysis on the rankings.
%
% results = calcToleranceRanking(input,parWeights,weightedTol)
%
% This file is used by calcStrainRanking.
%
% Required input
% input             Structure generated by calcStrainRanking
% 
% parWeights        Numeric vector with the weight for each parameter:%                   
%                   1) Lag phase (h)
%                   2) Growth duration (h)
%                   3) Average growth rate (1/h)
%                   4) Number of generations	
%                   5) Maximum specific growth rate (1/h)
%                   Leave empty to use equal weight for all paramteres, i.e. [1 1 1 1 1]
%                   Weights will automatically be adjusted to a sum of
%                   five.
%
% weightedTol       Calculate weighted tolerance scores, true (default) or false
%
% Output
% results          Structure with the following fields:
%                   


%% DEFINE LISTS
strainList = results.strainList;
numStrains = length(strainList);
levelList = results.levelList;
numLevels = length(levelList);
numPars = length(parWeights);

%% CALCULATE CONFORMANCE AND TOLERANCE SCORES
parScores = results.parameters.scores;
parErrors = results.parameters.errors;

conformScores = zeros(numStrains,numLevels);
conformErrors = zeros(numStrains,numLevels);

% for s = 1:numStrains    
%     % Calculate Conformance scores
%     wrs = bsxfun(@times,parScores{s},parWeights);
%     cs = sum(wrs,2);
%     
%     rse = bsxfun(@times,parErrors{s}.^2,parWeights);
%     cse = sum(rse,2);
%     
%     conformScores(s,:) = cs';
%     conformErrors(s,:) = sqrt(cse)';        
% end

for p = 1:numPars
    conformance.scores{p} = zeros(numStrains,numLevels);
    conformance.errors{p} = zeros(numStrains,numLevels);    
    
    conformScores = conformScores + parWeights(p).*parScores{p};
    conformErrors = conformErrors + (parWeights(p).*parErrors{p}).^2;
end
conformErrors = sqrt(conformErrors);

% Calculate Tolerance scores
if weightedTol
    toleranceScore = sum(bsxfun(@times,conformScores,levelList./sum(levelList)),2);
    toleranceError = bsxfun(@times,conformErrors,levelList./sum(levelList));
    toleranceError = sqrt(sum(toleranceError.^2,2));
else
    toleranceScore = sum(conformScores,2)./numLevels;
    toleranceError = sqrt(sum(conformErrors.^2,2))./numLevels;
end

%% GATHER RESULTS
results.conformance.scores = conformScores;
results.conformance.errors = conformErrors;

results.tolerance.scores = toleranceScore;
results.tolerance.errors = toleranceError;

%% PERFORM THE RVA - RANK VARIABILITY ANALYSIS
results.RVA = rva(toleranceScore,conformScores,conformErrors,strainList,numLevels);

