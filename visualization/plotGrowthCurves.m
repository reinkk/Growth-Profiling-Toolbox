function [] = plotGrowthCurves(datafile,varargin)
% plotGrowthCurves - Calculate average growth curves from experimental data
% and plot the results in one figure for each concentration/level 
%
% plotGrowthCurves(datafile
% plotGrowthCurves(datafile,levels,strains,strainsColored)
%
% The function generates an average growth curve for each strain from the
% experimental data in the Excel file indicated. The number of
% concentrations/levels and strains to plot can be controlled via the
% input. All strains will by default be plotted in grey color, but selected
% strains can be highlighted in different colors.
% 
% Required inputs
% datafile          String indicating the full path and file name  of an
%                   Excel-file generated by the 'extractExperimentalData'. 
%                   If empty, a file can be selected via the Explorer window
%
% Optional inputs
% levels            numeric vector with concentrations/levels, e.g. [1,1.5,3,6]. 
%                   Give an empty vector to plot all concentrations/levels
% strains           cell array of strings with names of strains to plot. Give an empty vector to plot all strains.
% strainsColored    cell array of strings with names of strains to highlight in color

%% HANDLE INPUT
if isempty(datafile)
    [filename, pathname] = uigetfile( {'*.xls;*.xlsx', 'EXCEL Files (*.xls, *.xlsx)';'*.*','All Files (*.*)'},'Open Excel data file');
    datafile = fullfile(pathname, filename);
    
    if isequal(filename,0) || isequal(pathname,0)
        disp('No valid file selected. Program ended.')
        return
    end
end

[levelsList,~,expInfo] = xlsread(datafile,'Info');
condition = expInfo{3,2};
strainList = unique(expInfo(6,2:end));
if isempty(strainList{1}), strainList(1) = []; end

% Set defaults
levels = levelsList;
strains = strainList;
strainsColored = {};

if nargin > 1 && ~isempty(varargin{1})
    levels = varargin{1};
end
if nargin > 2 && ~isempty(varargin{2})
    strains = unique(varargin{2});
end
if nargin > 3 && ~isempty(varargin{3})
    strainsColored = unique(varargin{3});
    if length(strainsColored) > length(strains)
        error('Number of strains to be colored is higher than number of strains to plot.');
    elseif sum(ismember(strains,strainsColored)) == 0
        warning('The selected file does not contain any of the strains indicated to be colored. Coloring is ignored.');
        strainsColored = {};
    elseif sum(ismember(strains,strainsColored)) < length(strainsColored)
        warning('The selected file does not contain all strains indicated to be colored. Unavailable strains are ignored.');
        isOK = ismember(strainsColored,strains);
        strainsColored = strainsColored(isOK);
    end
end

%% 
numLvls = length(levels);
numStrains = length(strains);
legendStr = cell(length(strainsColored),1);
colors = distinguishable_colors(length(strainsColored));

figh = zeros(numLvls,1);
axh = zeros(numLvls,1);
lineh = zeros(length(strainsColored),1);

for i = 1:numLvls    
    figh(i) = figure;
    axh(i) = axes('Box','on'); hold on;
    currLvl = levels(i);
    [condNUM,condTXT] = xlsread(datafile,[condition ' ' num2str(currLvl)]);
    
    isTime = ismember(condTXT(end,:),'Time');
    isOD = ismember(condTXT(end,:),'OD-value');
    
    for j = 1:numStrains
        currStrain = strains{j};
        x = strcmp(currStrain,strainsColored);
        if sum(x) == 0            
            isStrain = ismember(condTXT(7,:),currStrain);
            if any(isStrain)
                timeVectors = condNUM(7:end,isTime & isStrain);
                ODvectors = condNUM(7:end,isOD & isStrain);
                
                growthData = unifyGrowth(timeVectors,ODvectors);
                plot(axh(i),growthData(:,1),growthData(:,2),'Marker','.','MarkerFaceColor','k','LineWidth',1,'Color',0.8*[1 1 1]);        
            end
        end        
    end
    
    for j = 1:length(strainsColored)
        currStrain = strainsColored{j};
        isStrain = ismember(condTXT(7,:),currStrain);             
        timeVectors = condNUM(6:end,isTime & isStrain);
        ODvectors = condNUM(7:end,isOD & isStrain);
        
        growthData = unifyGrowth(timeVectors,ODvectors);
        lineh(j) = plot(axh(i),growthData(:,1),growthData(:,2),'Marker','.','MarkerFaceColor','k','LineWidth',1,'Color',colors(j,:));
        legendStr{j} = strainsColored{j};
    end        
        
    
    if ~isempty(strainsColored)
        legend(lineh,legendStr,'Location','northwest')
    end    
    title([condition ' ' num2str(currLvl) ' ' condTXT{6,1}])
    xlabel('Time (h)')
    ylabel('OD-equivalents')
end

%% AUXILIARY FUNCTIONS
% -------------------------------------------------------------------------
function result = unifyGrowth(timeData,ODdata)

numData = size(timeData,2);
timeVectors = cell(1,numData);
odVectors = cell(1,numData);

allTPs = [];
for t = 1:numData
    time = timeData(:,t);
    od = ODdata(:,t);
    isNAN = isnan(time) | isnan(od);
    time(isNAN) = [];
    od(isNAN) = [];
    
    % Check OD-vector for outliers    
    [~, isOutlier] = hampel(time, od, 15*median(time(2:end)-time(1:end-1)));
    od(isOutlier) = NaN;   
    
    time(isOutlier) = [];
    od(isOutlier) = [];
    
    timeVectors{t} = time;   
    odVectors{t} = od;
    
    if isempty(allTPs)
        allTPs = time;
    else
        time(~ismember(time,allTPs));
        allTPs = [allTPs; time(~ismember(time,allTPs))]; %#ok<AGROW>
    end
end
allTPs = sort(allTPs);

odMatrix = nan(length(allTPs),numData);
for i = 1:numData
    tps = timeVectors{i};
    [~,IDs] = intersect(tps,allTPs);
        
    od = odVectors{i};
    od_norm = od-od(1);  
    
    odMatrix(IDs,i) = od_norm(IDs);
end


% [timeUnion, IDs] = mintersect2(timeVectors);
% 
% 
% 
% 
% for i = 1:numData
%     od = odVectors{i}(IDs{i});
%     odMatrix(:,i) = od-od(1);    
% end

% if numData > 2
%     MAD = mad(odMatrix,1,2);
%     testvals = bsxfun(@minus,odMatrix,nanmedian(odMatrix,2));
%     testvals = bsxfun(@rdivide,testvals,MAD);
%     isOutlier = abs(testvals) > 5;
%     
%     odMatrix(isOutlier) = NaN;
%     allODs = nanmean(odMatrix,2);
% else
%     allODs = mean(odMatrix,2);
% end

allODs = nanmean(odMatrix,2);
result = [allTPs allODs];
