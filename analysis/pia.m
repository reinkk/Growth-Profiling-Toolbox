function PIA = pia(input)
% pia - Parameter Influence Analysis
%
% PIA = pia(input);
%
% This file is used by calcStrainRanking.
%
% Required input
% input      Structure generated by calcStrainRanking
%
% Output
% PIA       Structure with the following fields:
%   

%% DEFINE VARIABLES
% Set the property
if isfield(input,'robustness')
    property = 'Robustness';
elseif isfield(input,'tolerance');
    property = 'Tolerance';
else
    disp('Property to be calculated is not specified correctly. Program ended.')
    return
end

% Define lists
strainList = input.strainList;
options = input.options;
parWeightRefs = options.parWeights;

numStrains = length(strainList);
numPars = length(parWeightRefs);

%%
% weightVector = [0:0.1:2 2.2:0.2:3.2 3.6:0.4:5];
% weightMatrix = cell(size(weightVector));
% N = 500;
% rng(1,'twister');
% for i = 1:length(weightVector);
%     W = [weightVector(i)*ones(N,1) zeros(N,4)];
%     for j = 2:4
%         remain = 5 - sum(W,2);
%         W(:,j) = zeros(N,1) + (remain-zeros(N,1)).*rand(N,1);
%     end
%     remain = 5 - sum(W,2);
%     W(:,5) = remain;
%     
%     weightMatrix{i} = W;
% end
% 
% PIA.weightVector = weightVector;
% PIA.weightMatrix = weightMatrix;

%% GENERATE WEIGHTS
%N = 1000;
weightVector1 = (0:0.1:5)';
N = length(weightVector1);
weightVector2 = (numPars-weightVector1)./(numPars-1);
weightMatrix = [weightVector1 repmat(weightVector2,1,numPars-1)];

PIA.weightVector = weightVector1;
PIA.weightMatrix = weightMatrix;

%% RUN PIA
RVA = cell(N,numPars);
Scores = cell(1,numPars);
ScoreErrors = cell(1,numPars);
Ranks = cell(1,numPars);
RankBounds = cell(1,numPars);
pValues = cell(1,numPars);
a = zeros(numStrains,numPars);

progress = (1:N)./N*100;
fprintf('Running PIA...\n')
for p = 1:numPars
    Ranks{1,p} = zeros(N,numStrains);
    RankBounds{1,p} = zeros(N,numStrains);    
    
    fprintf('Parameter %d: ',p);
    I = zeros(1,numPars);
    while I(p) ~= 1
        I = randperm(numPars);
    end
    
    pw = weightMatrix(:,I);    
    
    for n = 1:N
        switch property
            case 'Robustness'
                tmpOutput = calcRobustnessRanking(input,pw(n,:));
            case 'Tolerance'                
                tmpOutput = calcToleranceRanking(input,pw(n,:),options.weightedTol);
        end
        
        if n == find(progress >= 25,1,'first')
            fprintf('25%%... ');
        elseif n == find(progress >= 50,1,'first')
            fprintf('50%%... ');
        elseif n == find(progress >= 75,1,'first')
            fprintf('75%%... ');
        end
        RVA{n,p} = tmpOutput.RVA;
        
        % Gather ranks and boundaries
        for s = 1:numStrains
            Scores{1,p}(n,s) = RVA{n,p}.Scores(s,1);
            ScoreErrors{1,p}(n,s) = RVA{n,p}.ScoreErrors(s,1);
            
            Ranks{1,p}(n,s) = RVA{n,p}.Ranks(s,1);
            RankBounds{1,p}(n,s) = RVA{n,p}.RankBounds(s,1);
            
            pValues{1,p}(n,s) = RVA{n,p}.pValues(s,2);
        end
    end
    
    % Calculate the representative area
    for s = 1:numStrains
        a1 = trapz(weightVector1,Ranks{1,p}(:,s)-Ranks{1,p}(1,s));     
        a(s,p) = -a1;
    end
    
    fprintf('100%%\n')    
end
fprintf('Done. \n')

PIA.RVA = RVA;
PIA.Scores = Scores;
PIA.ScoreErrors = ScoreErrors;
PIA.Ranks = Ranks;
PIA.RankBounds = RankBounds;
PIA.pValues = pValues;
PIA.InfluenceScores = a;

